//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ts3 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private JOKER1DataTable tableJOKER1;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["JOKER1"] != null)) {
                    this.Tables.Add(new JOKER1DataTable(ds.Tables["JOKER1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JOKER1DataTable JOKER1 {
            get {
                return this.tableJOKER1;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["JOKER1"] != null)) {
                this.Tables.Add(new JOKER1DataTable(ds.Tables["JOKER1"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableJOKER1 = ((JOKER1DataTable)(this.Tables["JOKER1"]));
            if ((this.tableJOKER1 != null)) {
                this.tableJOKER1.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableJOKER1 = new JOKER1DataTable();
            this.Tables.Add(this.tableJOKER1);
        }
        
        private bool ShouldSerializeJOKER1() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void JOKER1RowChangeEventHandler(object sender, JOKER1RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class JOKER1DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDATE;
            
            private DataColumn columnID;
            
            private DataColumn columnJOKERNUMBER;
            
            private DataColumn columnNUMBER1;
            
            private DataColumn columnNUMBER2;
            
            private DataColumn columnNUMBER3;
            
            private DataColumn columnNUMBER4;
            
            private DataColumn columnNUMBER5;
            
            internal JOKER1DataTable() : 
                    base("JOKER1") {
                this.InitClass();
            }
            
            internal JOKER1DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn JOKERNUMBERColumn {
                get {
                    return this.columnJOKERNUMBER;
                }
            }
            
            internal DataColumn NUMBER1Column {
                get {
                    return this.columnNUMBER1;
                }
            }
            
            internal DataColumn NUMBER2Column {
                get {
                    return this.columnNUMBER2;
                }
            }
            
            internal DataColumn NUMBER3Column {
                get {
                    return this.columnNUMBER3;
                }
            }
            
            internal DataColumn NUMBER4Column {
                get {
                    return this.columnNUMBER4;
                }
            }
            
            internal DataColumn NUMBER5Column {
                get {
                    return this.columnNUMBER5;
                }
            }
            
            public JOKER1Row this[int index] {
                get {
                    return ((JOKER1Row)(this.Rows[index]));
                }
            }
            
            public event JOKER1RowChangeEventHandler JOKER1RowChanged;
            
            public event JOKER1RowChangeEventHandler JOKER1RowChanging;
            
            public event JOKER1RowChangeEventHandler JOKER1RowDeleted;
            
            public event JOKER1RowChangeEventHandler JOKER1RowDeleting;
            
            public void AddJOKER1Row(JOKER1Row row) {
                this.Rows.Add(row);
            }
            
            public JOKER1Row AddJOKER1Row(string DATE, int JOKERNUMBER, int NUMBER1, int NUMBER2, int NUMBER3, int NUMBER4, int NUMBER5) {
                JOKER1Row rowJOKER1Row = ((JOKER1Row)(this.NewRow()));
                rowJOKER1Row.ItemArray = new object[] {
                        DATE,
                        null,
                        JOKERNUMBER,
                        NUMBER1,
                        NUMBER2,
                        NUMBER3,
                        NUMBER4,
                        NUMBER5};
                this.Rows.Add(rowJOKER1Row);
                return rowJOKER1Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                JOKER1DataTable cln = ((JOKER1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new JOKER1DataTable();
            }
            
            internal void InitVars() {
                this.columnDATE = this.Columns["DATE"];
                this.columnID = this.Columns["ID"];
                this.columnJOKERNUMBER = this.Columns["JOKERNUMBER"];
                this.columnNUMBER1 = this.Columns["NUMBER1"];
                this.columnNUMBER2 = this.Columns["NUMBER2"];
                this.columnNUMBER3 = this.Columns["NUMBER3"];
                this.columnNUMBER4 = this.Columns["NUMBER4"];
                this.columnNUMBER5 = this.Columns["NUMBER5"];
            }
            
            private void InitClass() {
                this.columnDATE = new DataColumn("DATE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDATE);
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnJOKERNUMBER = new DataColumn("JOKERNUMBER", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJOKERNUMBER);
                this.columnNUMBER1 = new DataColumn("NUMBER1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER1);
                this.columnNUMBER2 = new DataColumn("NUMBER2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER2);
                this.columnNUMBER3 = new DataColumn("NUMBER3", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER3);
                this.columnNUMBER4 = new DataColumn("NUMBER4", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER4);
                this.columnNUMBER5 = new DataColumn("NUMBER5", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNUMBER5);
                this.columnID.AutoIncrement = true;
            }
            
            public JOKER1Row NewJOKER1Row() {
                return ((JOKER1Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new JOKER1Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(JOKER1Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JOKER1RowChanged != null)) {
                    this.JOKER1RowChanged(this, new JOKER1RowChangeEvent(((JOKER1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JOKER1RowChanging != null)) {
                    this.JOKER1RowChanging(this, new JOKER1RowChangeEvent(((JOKER1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JOKER1RowDeleted != null)) {
                    this.JOKER1RowDeleted(this, new JOKER1RowChangeEvent(((JOKER1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JOKER1RowDeleting != null)) {
                    this.JOKER1RowDeleting(this, new JOKER1RowChangeEvent(((JOKER1Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveJOKER1Row(JOKER1Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class JOKER1Row : DataRow {
            
            private JOKER1DataTable tableJOKER1;
            
            internal JOKER1Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableJOKER1 = ((JOKER1DataTable)(this.Table));
            }
            
            public string DATE {
                get {
                    try {
                        return ((string)(this[this.tableJOKER1.DATEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.DATEColumn] = value;
                }
            }
            
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.IDColumn] = value;
                }
            }
            
            public int JOKERNUMBER {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.JOKERNUMBERColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.JOKERNUMBERColumn] = value;
                }
            }
            
            public int NUMBER1 {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.NUMBER1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.NUMBER1Column] = value;
                }
            }
            
            public int NUMBER2 {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.NUMBER2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.NUMBER2Column] = value;
                }
            }
            
            public int NUMBER3 {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.NUMBER3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.NUMBER3Column] = value;
                }
            }
            
            public int NUMBER4 {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.NUMBER4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.NUMBER4Column] = value;
                }
            }
            
            public int NUMBER5 {
                get {
                    try {
                        return ((int)(this[this.tableJOKER1.NUMBER5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJOKER1.NUMBER5Column] = value;
                }
            }
            
            public bool IsDATENull() {
                return this.IsNull(this.tableJOKER1.DATEColumn);
            }
            
            public void SetDATENull() {
                this[this.tableJOKER1.DATEColumn] = System.Convert.DBNull;
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableJOKER1.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableJOKER1.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsJOKERNUMBERNull() {
                return this.IsNull(this.tableJOKER1.JOKERNUMBERColumn);
            }
            
            public void SetJOKERNUMBERNull() {
                this[this.tableJOKER1.JOKERNUMBERColumn] = System.Convert.DBNull;
            }
            
            public bool IsNUMBER1Null() {
                return this.IsNull(this.tableJOKER1.NUMBER1Column);
            }
            
            public void SetNUMBER1Null() {
                this[this.tableJOKER1.NUMBER1Column] = System.Convert.DBNull;
            }
            
            public bool IsNUMBER2Null() {
                return this.IsNull(this.tableJOKER1.NUMBER2Column);
            }
            
            public void SetNUMBER2Null() {
                this[this.tableJOKER1.NUMBER2Column] = System.Convert.DBNull;
            }
            
            public bool IsNUMBER3Null() {
                return this.IsNull(this.tableJOKER1.NUMBER3Column);
            }
            
            public void SetNUMBER3Null() {
                this[this.tableJOKER1.NUMBER3Column] = System.Convert.DBNull;
            }
            
            public bool IsNUMBER4Null() {
                return this.IsNull(this.tableJOKER1.NUMBER4Column);
            }
            
            public void SetNUMBER4Null() {
                this[this.tableJOKER1.NUMBER4Column] = System.Convert.DBNull;
            }
            
            public bool IsNUMBER5Null() {
                return this.IsNull(this.tableJOKER1.NUMBER5Column);
            }
            
            public void SetNUMBER5Null() {
                this[this.tableJOKER1.NUMBER5Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class JOKER1RowChangeEvent : EventArgs {
            
            private JOKER1Row eventRow;
            
            private DataRowAction eventAction;
            
            public JOKER1RowChangeEvent(JOKER1Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public JOKER1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
